TODOs:
    1) Add in monetary functionality (e.g. wagers / wins & losses etc)
    2) Options for different wagers
    3) Add in Split functionality
    4) Add some nicer CSS
    5) Images instead of text for cards
    6) 


Game Mechanics:
    1) Player buys chips (later)
    2) Player places a wager (later)
    3) Dealer deals cards to the player & themself (DONE!)
    4) Player plays hand (In Progress)
    5) Dealer plays their hand (In Progress)
    6) Payouts 

(4) playing mechanics...
 - If dealt a Blackjack (21 total...) 
    √) player immediately wins (1.5x wager), unless dealer also has Blackjack 
    √) If dealer also has blackjac then wager returned
 - If not dealt a blackjack, player has five options:
    √) Stand (stay as you are - play moves on to dealer)
    √) Hit (no limit on the number of cards you can hit - unless you bust!)
    √) Double down (double your wager, dealer then deals you only one more card)
    LATER) Split (if dealt two of the same cards - you can split and then effectively play each as individual hand - dealer will add one more card to each)
    √) Surrender - if you don't like your hand, can surrender the hand and get half your wager back.

CURRENT BUGS:
> No functionality to handle Aces as either 1 or 11...


Notes:

how to handle aces??

Each time that the score is calculated, check if the array.Name contains an Ace. If not, then calculate the score as normal.
If the array does contain an Ace within the .Name object value, then the calculation should be run with (Each!) ace as either
a 1 or as 11 (Further Q. how to handle more than one ace?!?!). (Possibly put the potential results in an array?).

Put the array in reverse numerical order (e.g. highest value first). Select first result and take that value, unless over 21.
If over 21, move onto the next value in the array...

Should there be a generic calcuation function that then returns the players best score? Applying the DRY principle, 
then probably yes

How to build that function?
Take one input into the function > whether the players cards or dealers cards are being calculated, so that it knows 
which array to calculate.
Should return two items: the best score for the player / 
The range of possible scores - for display (later...) (this is important in helping players decide what actions to take - e.g. hit vs stand)

Need to count the number of Aces, to know how many times to iterate through the calculation loop...

How many possible scores can there be per Ace?

One Ace (e.g. Ace, Five) = 2 possible scores: 16 or 6
Two Aces (e.g. Ace, Ace) = 4 possible scores ??? 2, 12 (technically twice though), 22
Two Aces (e.g. Ace, Ace, Five) = 4 possible scores: 7, 17 (technically twice), 27
Three Aces (e.g. Ace, Ace, Ace) = 1/11 1/11 1/11 = Draw a table!
Four Aces (e.g. ) = 1/11, 1/11, 1/11, 1/11 = 